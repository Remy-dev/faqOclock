security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        App\Entity\User:
            algorithm: auto

    providers:
        our_db_provider:
            entity:
                class: App\Entity\User
                property: username

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern:  ^/api/login
            stateless: true
           # anonymous: true
            provider: our_db_provider
            json_login:
                check_path:               /api/login_check
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        main:
            pattern: ^/
            anonymous: lazy

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

            form_login:
                login_path: login
                check_path: login
                username_parameter: login[_username]
                password_parameter: login[_password]

            logout:
                path:   /logout
                target: /


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin/(question|answer)/toggle, roles: ROLE_MODERATOR }
        - { path: ^/admin/(tag|user), roles: ROLE_MODERATOR }
        - { path: ^/answer/validate, roles: ROLE_USER }
        - { path: ^/question/add, roles: ROLE_USER }
        - { path: ^/question/\d+, roles: ROLE_USER, methods: ["POST"] }
        - { path: ^/user/(profile|edit), roles: ROLE_USER }
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY}
        - { path: ^/api, roles: ROLE_USER }

    role_hierarchy:
        ROLE_ADMIN: ROLE_MODERATOR
        ROLE_MODERATOR: ROLE_USER